{"version":3,"sources":["redux/reducers/board.js","redux/store.js","containers/BoardContainer.js","components/GameOverMessage.js","containers/gameContainer.js","components/App.js","index.js"],"names":["initialState","board","addNewNumber","score","gameOverMessage","direction","isMoved","oldboard","newboard","JSON","stringify","deepCopy","x","parse","getBlankCordinates","blankCoordinates","row","length","col","push","arr","emptyCordinates","cor","Math","floor","random","shiftRowLeft","filter","val","missing","zeros","Array","fill","concat","shiftMatrixLeft","newrow","shiftRowRight","shiftMatrixRight","merge2Right","merge2Left","rotateRight","newRow","rotateLeft","unshift","getSum","sum","boardcopy","console","log","boardReducer","state","arguments","undefined","action","stateCopy","type","resultAddnew","resultScore","Object","objectSpread","result2048","resultBug","resultUp","moveUp","resultDown","boardcopy2","boardcopy3","boardcopy4","moveDown","resultRight","moveRight","resultLeft","moveLeft","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","BoardContainer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this2","react_default","a","createElement","className","map","i","key","j","Component","connect","GameOverMessage","handleRestart","bind","assertThisInitialized","setNewGame","onClick","dispatch","GameContainer","_Component","inherits","createClass","value","class","disabled","components_GameOverMessage","containers_BoardContainer","App","handler","event","testBoard","viewbug","addRandomSquare","tabIndex","onKeyDown","gameContainer","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.db42c1c1.chunk.js","sourcesContent":["let randomNewBoard = addNewNumber(addNewNumber([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]))\r\nconst initialState = {\r\n  board: randomNewBoard,\r\n  score: 0,\r\n  // bestScore: 0,\r\n  gameOverMessage: null,\r\n  // isMoved: true\r\n  direction: null\r\n}\r\n\r\n// ============================================================================\r\n// -PURE FUNCTIONS THAT CHANGE THE BOARD-\r\n// ============================================================================\r\n\r\nfunction isMoved (oldboard, newboard) {\r\n  if (JSON.stringify(oldboard) === JSON.stringify(newboard)) {\r\n    return false\r\n  } else {\r\n    return true\r\n  }\r\n}\r\nfunction deepCopy (x) {\r\n  return JSON.parse(JSON.stringify(x))\r\n}\r\n\r\nfunction getBlankCordinates (board) {\r\n  // this takes in this.state.board, returns an array of blank coordinates\r\n  const blankCoordinates = []\r\n  for (let row = 0; row < board.length; row++) {\r\n    for (let col = 0; col < board[row].length; col++) {\r\n      if (board[row][col] === 0) { blankCoordinates.push([row, col]) }\r\n    }\r\n  }\r\n  return blankCoordinates\r\n}\r\n\r\nfunction getRandomNumber (arr) {\r\n  // it returns a random index in the array\r\n  let r = Math.floor(Math.random() * arr.length)\r\n  return arr[r]\r\n}\r\n\r\nfunction addNewNumber (board) {\r\n  const newboard = deepCopy(board)\r\n  const emptyCordinates = getBlankCordinates(board)\r\n  const cor = getRandomNumber(emptyCordinates)\r\n  newboard[cor[0]][cor[1]] = 2\r\n  return newboard\r\n}\r\n\r\nfunction shiftRowLeft (row) {\r\n  let arr = row.filter(val => val)\r\n  let missing = row.length - arr.length\r\n  let zeros = Array(missing).fill(0)\r\n  arr = arr.concat(zeros)\r\n  return arr\r\n}\r\n\r\nfunction shiftMatrixLeft (board) {\r\n  const newboard = []\r\n  for (let col = 0; col < board.length; col++) {\r\n    let row = board[col]\r\n    let newrow = shiftRowLeft(row)\r\n    newboard.push(newrow)\r\n  }\r\n  return newboard\r\n}\r\n\r\nfunction shiftRowRight (row) {\r\n  let arr = row.filter(val => val)\r\n  let missing = row.length - arr.length\r\n  let zeros = Array(missing).fill(0)\r\n  arr = zeros.concat(arr)\r\n  return arr\r\n}\r\n\r\nfunction shiftMatrixRight (board) {\r\n  let newboard = []\r\n  for (let col = 0; col < board.length; col++) {\r\n    let row = board[col]\r\n    let newrow = shiftRowRight(row)\r\n    newboard.push(newrow)\r\n  }\r\n  return newboard\r\n}\r\n\r\n// function mergeRow2Right (row) {\r\n//   for (let key = row.length - 1; key > 0; key--) {\r\n//     if (row[key] === row[key - 1]) {\r\n//       row[key] = 2 * row[key]\r\n//       row[key - 1] = 0\r\n//       row = shiftRowRight(row)\r\n//     }\r\n//   }\r\n//   return row\r\n// }\r\n\r\nfunction merge2Right (board, score) {\r\n  for (let col = 0; col < board.length; col++) {\r\n    for (let row = board[col].length - 1; row > 0; row--) {\r\n      if (board[col][row] > 0 && board[col][row] === board[col][row - 1]) {\r\n        board[col][row] = 2 * board[col][row]\r\n       \r\n        board[col][row - 1] = 0\r\n        board[col] = shiftRowRight(board[col])\r\n      }\r\n    }\r\n  }\r\n\r\n  return { board, score }\r\n}\r\n\r\nfunction merge2Left (board, score) {\r\n  for (let col = 0; col < board.length; col++) {\r\n    for (let row = 0; row < board[col].length; row++) {\r\n      if (board[col][row] > 0 && board[col][row] === board[col][row + 1]) {\r\n        board[col][row] = 2 * board[col][row]\r\n        \r\n        board[col][row + 1] = 0\r\n        board[col] = shiftRowLeft(board[col])\r\n      }\r\n    }\r\n  }\r\n\r\n  return { board, score }\r\n}\r\n\r\nfunction rotateRight (board) {\r\n  // transpose\r\n  let newboard = []\r\n  for (let col = 0; col < board.length; col++) {\r\n    const newRow = []\r\n    // swap rows\r\n    for (let row = board[col].length - 1; row >= 0; row--) {\r\n      newRow.push(board[row][col])\r\n    }\r\n    newboard.push(newRow)\r\n  }\r\n  return newboard\r\n}\r\n\r\nfunction rotateLeft (board) {\r\n  // transpose and swap columns\r\n  let newboard = []\r\n  for (let col = board.length - 1; col >= 0; col--) {\r\n    const newRow = []\r\n    for (let row = board[col].length - 1; row >= 0; row--) {\r\n      newRow.unshift(board[row][col])\r\n    }\r\n    newboard.push(newRow)\r\n  }\r\n  return newboard\r\n}\r\n\r\nfunction moveRight (board, score, gameOverMessage) {\r\n  let boardcopy = deepCopy(board)\r\n  boardcopy = shiftMatrixRight(boardcopy)\r\n  boardcopy = merge2Right(boardcopy, score).board\r\n  score = merge2Right(boardcopy, score).score\r\n  // if this changes the board, add a new square\r\n  console.log('board,', board)\r\n  console.log('boardcopy,', boardcopy)\r\n  console.log('isMoved', isMoved(board, boardcopy))\r\n  if (isMoved(board, boardcopy)) {\r\n    boardcopy = addNewNumber(boardcopy)\r\n    // check if the game is over\r\n    if (getBlankCordinates(boardcopy).length === 0) {\r\n      gameOverMessage = 'You lost the game.'\r\n      return { boardcopy, score, gameOverMessage }\r\n    // TO DO: show a fail message and reset the game\r\n    } else {\r\n      gameOverMessage = null\r\n      return { boardcopy, score, gameOverMessage }\r\n    }\r\n  } else {\r\n    return { boardcopy, score, gameOverMessage }\r\n  }\r\n}\r\n\r\nfunction moveLeft (board, score, gameOverMessage) {\r\n  let boardcopy = deepCopy(board)\r\n  boardcopy = shiftMatrixLeft(board)\r\n  console.log('shiftleft result', boardcopy)\r\n  boardcopy = merge2Left(boardcopy, score).board\r\n  console.log('merge2left,', boardcopy)\r\n  score = merge2Left(boardcopy, score).score\r\n  console.log('merge2left', score)\r\n  // if this changes the board, add a new square\r\n  console.log('board,', board)\r\n  console.log('boardcopy,', boardcopy)\r\n  console.log('isMoved', isMoved(board, boardcopy))\r\n  if (isMoved(board, boardcopy)) {\r\n    boardcopy = addNewNumber(boardcopy)\r\n    // check if the game is over\r\n    if (getBlankCordinates(boardcopy).length === 0) {\r\n      gameOverMessage = 'You lost the game'\r\n      return { boardcopy, score, gameOverMessage }\r\n    // TO DO: show a fail message and reset the game\r\n    } else {\r\n      gameOverMessage = null\r\n      return { boardcopy, score, gameOverMessage }\r\n    }\r\n  } else {\r\n    return { boardcopy, score, gameOverMessage }\r\n  }\r\n}\r\n\r\nfunction moveUp (board, score, gameOverMessage) {\r\n  let boardcopy = deepCopy(board)\r\n  boardcopy = rotateRight(boardcopy)\r\n  boardcopy = shiftMatrixRight(boardcopy)\r\n  boardcopy = merge2Right(boardcopy, score).board\r\n  score = merge2Right(boardcopy, score).score\r\n  boardcopy = rotateLeft(boardcopy)\r\n  // if this changes the board, add a new square\r\n  // console.log('board,', board)\r\n  // console.log('boardcopy,', boardcopy)\r\n  // console.log('isMoved', isMoved(board, boardcopy))\r\n  if (isMoved(board, boardcopy)) {\r\n    boardcopy = addNewNumber(boardcopy)\r\n    // check if the game is over\r\n    if (getBlankCordinates(boardcopy).length === 0) {\r\n      gameOverMessage = 'You lost the game'\r\n      return { boardcopy, score, gameOverMessage }\r\n    // TO DO: show a fail message and reset the game\r\n    } else {\r\n      gameOverMessage = 'null'\r\n      return { boardcopy, score, gameOverMessage }\r\n    }\r\n  } else {\r\n    return { boardcopy, score, gameOverMessage }\r\n  }\r\n}\r\n\r\nfunction moveDown (board, score, gameOverMessage) {\r\n  let boardcopy = deepCopy(board)\r\n  // console.log(boardcopy)\r\n  let boardcopy1 = rotateRight(boardcopy)\r\n  // console.log(boardcopy1)\r\n  let boardcopy2 = shiftMatrixLeft(boardcopy1)\r\n  // console.log(boardcopy2)\r\n  let boardcopy3 = merge2Left(boardcopy2, score).board\r\n  // console.log(boardcopy3)\r\n  score = merge2Left(boardcopy2, score).score\r\n  let boardcopy4 = rotateLeft(boardcopy3)\r\n  // console.log(boardcopy4)\r\n  // if this changes the board, add a new square\r\n  // console.log('board,', board)\r\n  // console.log('boardcopy,', boardcopy)\r\n  // console.log('isMoved', isMoved(board, boardcopy))\r\n  if (isMoved(board, boardcopy4)) {\r\n    let boardcopy = addNewNumber(boardcopy4)\r\n    // console.log(boardcopy5)\r\n    // check if the game is over\r\n    if (getBlankCordinates(boardcopy).length === 0) {\r\n      gameOverMessage = 'You lost the game'\r\n      console.log('gameOverMessage')\r\n    // TO DO: show a fail message and reset the game\r\n    return { boardcopy, score, gameOverMessage }\r\n    } else {\r\n      gameOverMessage = null\r\n      \r\n      console.log('gameOverMessage is null')\r\n      \r\n      return { boardcopy, score, gameOverMessage }\r\n    }\r\n  } else {\r\n    return { boardcopy, score, gameOverMessage }\r\n  }\r\n}\r\n\r\nfunction getSum(x) {\r\n  var sum = 0;\r\n  const board = x.boardcopy\r\n  for (let row = 0; row < board.length; row++) {\r\n    for (let col=0; col<board[row].length; col++) {\r\n      \r\n      sum = sum + board[row][col]\r\n      console.log('sum row col', sum, row, col, board[row][col])\r\n    }\r\n  }\r\n  console.log('sum', sum)\r\n  return sum \r\n}\r\n// ===========================================\r\n// -REDUCER-\r\n// ===========================================\r\n\r\nconst boardReducer = (state = initialState, action) => {\r\n  const stateCopy = deepCopy(state)\r\n  let board = stateCopy.board\r\n  let score = stateCopy.score\r\n  let gameOverMessage = stateCopy.gameOverMessage\r\n  switch (action.type) {\r\n    case 'ADD_NEW':\r\n      const resultAddnew = addNewNumber(board)\r\n      const resultScore = getSum(resultAddnew)\r\n      return { ...state, board: resultAddnew, score: resultScore }\r\n\r\n    case 'TEST_NUMBERS':\r\n      const result2048 = [[2, 4, 8, 16], [32, 64, 128, 256], [512, 1024, 2048, 0], [2, 4, 8, 16]]\r\n      return {\r\n        ...state, board: result2048, score: getSum(result2048)\r\n      }\r\n\r\n    case 'BUG':\r\n      const resultBug = [[32,8,16,2],[64,16,4,16],[2,8,32,2],[2,2,4,32]]\r\n      return {...state, board:resultBug, score: getSum(resultBug)}\r\n\r\n    case 'UP':\r\n      const resultUp = moveUp(board, score, gameOverMessage)\r\n      return {\r\n        ...state, board: resultUp.boardcopy, score: getSum(resultUp), direction:'fas fa-arrow-circle-up is-light'\r\n      }\r\n\r\n    case 'DOWN':\r\n      const resultDown = moveDown(board, score, gameOverMessage)\r\n      return { ...state, board: resultDown.boardcopy, score: getSum(resultDown), direction:'fas fa-arrow-circle-down is-light' }\r\n\r\n    case 'RIGHT':\r\n      const resultRight = moveRight(board, score, gameOverMessage)\r\n      return { ...state, board: resultRight.boardcopy, score: getSum(resultRight), direction:'fas fa-arrow-circle-right is-light' }\r\n\r\n    case 'LEFT':\r\n      let resultLeft = moveLeft(board, score, gameOverMessage)\r\n      return { ...state, board: resultLeft.boardcopy, score: getSum(resultLeft), direction:'fas fa-arrow-circle-left is-light' }\r\n\r\n    case 'RESTART':\r\n      return initialState\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default boardReducer\r\n","import { createStore, combineReducers } from 'redux'\r\nimport boardReducer from './reducers/board'\r\n\r\nconst rootReducer = combineReducers({ board: boardReducer })\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport default store\r\n","import React, { Component } from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nclass BoardContainer extends Component {\r\n  // static propTypes = {\r\n  //   board:PropTypes.arrayOf(propTypes.array).isRequired\r\n  // }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      board: props.board\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='gameBoard'>\r\n        {this.props.board.map((row, i) => (\r\n          <div key={i} className='row'>\r\n            {row.map((col, j) => (\r\n              <span key={j} className={'cell block-value-' + this.props.board[i][j]}>{this.props.board[i][j]}</span>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  { board: state.board.board }\r\n)\r\n\r\nexport default connect(mapStateToProps)(BoardContainer)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass GameOverMessage extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      board: props.board,\r\n      score: props.score,\r\n      gameOverMessage: props.gameOverMessage\r\n    }\r\n    this.handleRestart = this.handleRestart.bind(this)\r\n  }\r\n\r\n  handleRestart () {\r\n    console.log('you pressed new game')\r\n    this.props.setNewGame()\r\n  }\r\n\r\n  render () {\r\n    if (this.state.gameOverMessage) {\r\n      return (\r\n        <div className='gameOverMessage notification is-danger'>\r\n          <button className='delete' onClick={this.handleRestart} />\r\n          {this.props.gameOverMessage}\r\n        </div>\r\n      )\r\n    } else { return null }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  { board: state.board.board, score: state.board.score, gameOverMessage: state.board.gameOverMessage }\r\n)\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setNewGame: () => dispatch({ type: 'RESTART' })\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameOverMessage)\r\n","import React, { Component } from 'react'\r\nimport BoardContainer from './BoardContainer'\r\nimport { connect } from 'react-redux'\r\nimport GameOverMessage from '../components/GameOverMessage'\r\n\r\n// import Heading from '../components/Heading'\r\nexport class GameContainer extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      board: props.board,\r\n      score: props.score,\r\n      direction: props.direction,\r\n      gameOverMessage: props.gameOverMessage\r\n    }\r\n    this.handleRestart = this.handleRestart.bind(this)\r\n  }\r\n\r\n  handleRestart () {\r\n    console.log('you pressed new game')\r\n    this.props.setNewGame()\r\n  }\r\n  render () {\r\n    return (\r\n      <div className='gameContainer container'>\r\n\r\n        <div className='gameHeader'>\r\n          <button className='button is-danger' onClick={this.handleRestart}>New Game</button> \r\n          <a>\r\n            <span class=\"icon is-primary is-large is-outlined\">\r\n              <i class={this.props.direction}></i>\r\n            </span>\r\n          </a>\r\n          <button className='button is-light is-outlined' disabled>Score: {this.props.score}</button>\r\n        </div>\r\n        <GameOverMessage />\r\n\r\n        <BoardContainer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  { board: state.board.board, score: state.board.score, gameOverMessage: state.board.gameOverMessage, direction: state.board.direction }\r\n)\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setNewGame: () => dispatch({ type: 'RESTART' })\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameContainer)\r\n","import React, { Component } from 'react'\r\nimport GameContainer from '../containers/gameContainer'\r\nimport { connect } from 'react-redux'\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      board: props.board\r\n    }\r\n    this.handler = this.handler.bind(this)\r\n  }\r\n\r\n  handler (event) {\r\n    // console.log(event.key)\r\n    if (event.key === 'Alt') {\r\n      console.log('===========================')\r\n      this.props.testBoard()\r\n    }\r\n    if (event.key ==='a'){\r\n      console.log('This is my bug situation')\r\n      this.props.viewbug()\r\n    }\r\n    if (event.key === 'ArrowUp') {\r\n      // console.log(this.props.board)\r\n      console.log('===========================')\r\n      console.log('you just pressed', event.key)\r\n      this.props.moveUp()\r\n    }\r\n    if (event.key === 'ArrowRight') {\r\n      console.log('===========================')\r\n      console.log('you just pressed', event.key)\r\n      this.props.moveRight()\r\n    }\r\n    if (event.key === 'ArrowDown') {\r\n      console.log('===========================')\r\n      console.log('you just pressed', event.key)\r\n      this.props.moveDown()\r\n    }\r\n    if (event.key === 'ArrowLeft') {\r\n      console.log('===========================')\r\n      console.log('you just pressed', event.key)\r\n      this.props.moveLeft()\r\n    }\r\n    if (event.key === 'Enter') {\r\n      console.log('===========================')\r\n      console.log('you just pressed', event.key)\r\n      this.props.addRandomSquare()\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='App' tabIndex='0' onKeyDown={this.handler}>\r\n        <header className='App-header'>\r\n          <h1>\r\n           2048 Game\r\n          </h1>\r\n        </header>\r\n        <GameContainer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  { board: state.board.board, score: state.board.score }\r\n)\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addRandomSquare: () => dispatch({ type: 'ADD_NEW' }),\r\n  testBoard: () => dispatch({ type: 'TEST_NUMBERS' }),\r\n  moveRight: () => dispatch({ type: 'RIGHT' }),\r\n  moveLeft: () => dispatch({ type: 'LEFT' }),\r\n  moveUp: () => dispatch({ type: 'UP' }),\r\n  moveDown: () => dispatch({ type: 'DOWN' }),\r\n  viewbug:()=> dispatch({type:'BUG'})\r\n\r\n  // setNewGame: () => dispatch({ type: 'RESTART' })\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './styles/index.css'\r\nimport store from './redux/store'\r\nimport App from './components/App'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n\r\n  , document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}