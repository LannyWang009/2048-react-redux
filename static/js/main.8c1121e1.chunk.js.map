{"version":3,"sources":["redux/reducers/board.js","redux/store.js","containers/BoardContainer.js","components/GameOverMessage.js","containers/gameContainer.js","components/App.js","index.js"],"names":["initialState","board","addNewNumber","score","gameOverMessage","isMoved","oldboard","newboard","JSON","stringify","deepCopy","x","parse","getBlankCordinates","blankCoordinates","row","length","col","push","arr","emptyCordinates","cor","Math","floor","random","shiftRowLeft","filter","val","missing","zeros","Array","fill","concat","shiftMatrixLeft","newrow","shiftRowRight","shiftMatrixRight","merge2Right","merge2Left","rotateRight","newRow","rotateLeft","unshift","boardReducer","state","arguments","undefined","action","stateCopy","type","resultAddnew","Object","objectSpread","resultUp","boardcopy","moveUp","resultDown","moveDown","resultRight","console","log","moveRight","resultLeft","boardcopy1","boardcopy2","moveLeft","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","BoardContainer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this2","react_default","a","createElement","className","map","i","key","j","Component","connect","GameOverMessage","handleRestart","bind","assertThisInitialized","setNewGame","onClick","dispatch","GameContainer","_Component","inherits","createClass","value","components_GameOverMessage","containers_BoardContainer","App","handler","event","testBoard","addRandomSquare","tabIndex","onKeyDown","gameContainer","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.8c1121e1.chunk.js","sourcesContent":["let randomNewBoard = addNewNumber(addNewNumber([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]))\nconst initialState = {\n  board: randomNewBoard,\n  score: 0,\n  // bestScore: 0,\n  gameOverMessage: null\n  // isMoved: true\n}\n\n// ============================================================================\n// -PURE FUNCTIONS THAT CHANGE THE BOARD-\n// ============================================================================\n\nfunction isMoved (oldboard, newboard) {\n  if (JSON.stringify(oldboard) === JSON.stringify(newboard)) {\n    return false\n  } else {\n    return true\n  }\n}\nfunction deepCopy (x) {\n  return JSON.parse(JSON.stringify(x))\n}\n\nfunction getBlankCordinates (board) {\n  // this takes in this.state.board, returns an array of blank coordinates\n  const blankCoordinates = []\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (board[row][col] === 0) { blankCoordinates.push([row, col]) }\n    }\n  }\n  return blankCoordinates\n}\n\nfunction getRandomNumber (arr) {\n  // it returns a random index in the array\n  let r = Math.floor(Math.random() * arr.length)\n  return arr[r]\n}\n\nfunction addNewNumber (board) {\n  const newboard = deepCopy(board)\n  const emptyCordinates = getBlankCordinates(board)\n  const cor = getRandomNumber(emptyCordinates)\n  newboard[cor[0]][cor[1]] = 2\n  return newboard\n}\n\nfunction shiftRowLeft (row) {\n  let arr = row.filter(val => val)\n  let missing = row.length - arr.length\n  let zeros = Array(missing).fill(0)\n  arr = arr.concat(zeros)\n  return arr\n}\n\nfunction shiftMatrixLeft (board) {\n  const newboard = []\n  for (let col = 0; col < board.length; col++) {\n    let row = board[col]\n    let newrow = shiftRowLeft(row)\n    newboard.push(newrow)\n  }\n  return newboard\n}\n\nfunction shiftRowRight (row) {\n  let arr = row.filter(val => val)\n  let missing = row.length - arr.length\n  let zeros = Array(missing).fill(0)\n  arr = zeros.concat(arr)\n  return arr\n}\n\nfunction shiftMatrixRight (board) {\n  let newboard = []\n  for (let col = 0; col < board.length; col++) {\n    let row = board[col]\n    let newrow = shiftRowRight(row)\n    newboard.push(newrow)\n  }\n  return newboard\n}\n\n// function mergeRow2Right (row) {\n//   for (let key = row.length - 1; key > 0; key--) {\n//     if (row[key] === row[key - 1]) {\n//       row[key] = 2 * row[key]\n//       row[key - 1] = 0\n//       row = shiftRowRight(row)\n//     }\n//   }\n//   return row\n// }\n\nfunction merge2Right (board, score) {\n  for (let col = 0; col < board.length; col++) {\n    for (let row = board[col].length - 1; row > 0; row--) {\n      if (board[col][row] > 0 && board[col][row] === board[col][row - 1]) {\n        board[col][row] = 2 * board[col][row]\n        score = score + board[col][row]\n        board[col][row - 1] = 0\n        board[col] = shiftRowRight(board[col])\n      }\n    }\n  }\n\n  return { board, score }\n}\n\nfunction merge2Left (board, score) {\n  for (let col = 0; col < board.length; col++) {\n    for (let row = 0; row < board[col].length; row++) {\n      if (board[col][row] > 0 && board[col][row] === board[col][row + 1]) {\n        board[col][row] = 2 * board[col][row]\n        score = score + board[col][row]\n        board[col][row + 1] = 0\n        board[col] = shiftRowLeft(board[col])\n      }\n    }\n  }\n\n  return { board, score }\n}\n\nfunction rotateRight (board) {\n  // transpose\n  let newboard = []\n  for (let col = 0; col < board.length; col++) {\n    const newRow = []\n    // swap rows\n    for (let row = board[col].length - 1; row >= 0; row--) {\n      newRow.push(board[row][col])\n    }\n    newboard.push(newRow)\n  }\n  return newboard\n}\n\nfunction rotateLeft (board) {\n  // transpose and swap columns\n  let newboard = []\n  for (let col = board.length - 1; col >= 0; col--) {\n    const newRow = []\n    for (let row = board[col].length - 1; row >= 0; row--) {\n      newRow.unshift(board[row][col])\n    }\n    newboard.push(newRow)\n  }\n  return newboard\n}\n\nfunction moveRight (board, score, gameOverMessage) {\n  let boardcopy = deepCopy(board)\n  boardcopy = shiftMatrixRight(boardcopy)\n  boardcopy = merge2Right(boardcopy, score).board\n  score = merge2Right(boardcopy, score).score\n  // if this changes the board, add a new square\n  console.log('board,', board)\n  console.log('boardcopy,', boardcopy)\n  console.log('isMoved', isMoved(board, boardcopy))\n  if (isMoved(board, boardcopy)) {\n    boardcopy = addNewNumber(boardcopy)\n    // check if the game is over\n    if (getBlankCordinates(boardcopy).length === 0) {\n      gameOverMessage = 'You lost the game.'\n    // TO DO: show a fail message and reset the game\n    } else {\n      gameOverMessage = null\n      return { boardcopy, score, gameOverMessage }\n    }\n  } else {\n    return { boardcopy, score, gameOverMessage }\n  }\n}\n\nfunction moveLeft (board, score, gameOverMessage) {\n  let boardcopy = deepCopy(board)\n  let boardcopy1 = shiftMatrixLeft(board)\n  console.log('shiftleft result', boardcopy1)\n  let boardcopy2 = merge2Left(boardcopy1, score).board\n  console.log('merge2left,', boardcopy2)\n  score = merge2Left(boardcopy2, score).score\n  console.log('merge2left', score)\n  // if this changes the board, add a new square\n  console.log('board,', board)\n  console.log('boardcopy,', boardcopy2)\n  console.log('isMoved', isMoved(board, boardcopy))\n  if (isMoved(board, boardcopy)) {\n    boardcopy = addNewNumber(boardcopy)\n    // check if the game is over\n    if (getBlankCordinates(boardcopy).length === 0) {\n      gameOverMessage = 'You lost the game'\n    // TO DO: show a fail message and reset the game\n    } else {\n      gameOverMessage = null\n      return { boardcopy, score, gameOverMessage }\n    }\n  } else {\n    return { boardcopy, score, gameOverMessage }\n  }\n}\n\nfunction moveUp (board, score, gameOverMessage) {\n  let boardcopy = deepCopy(board)\n  boardcopy = rotateRight(boardcopy)\n  boardcopy = shiftMatrixRight(boardcopy)\n  boardcopy = merge2Right(boardcopy, score).board\n  score = merge2Right(boardcopy, score).score\n  boardcopy = rotateLeft(boardcopy)\n  // if this changes the board, add a new square\n  // console.log('board,', board)\n  // console.log('boardcopy,', boardcopy)\n  // console.log('isMoved', isMoved(board, boardcopy))\n  if (isMoved(board, boardcopy)) {\n    boardcopy = addNewNumber(boardcopy)\n    // check if the game is over\n    if (getBlankCordinates(boardcopy).length === 0) {\n      gameOverMessage = 'You lost the game'\n    // TO DO: show a fail message and reset the game\n    } else {\n      gameOverMessage = 'null'\n      return { boardcopy, score, gameOverMessage }\n    }\n  } else {\n    return { boardcopy, score, gameOverMessage }\n  }\n}\n\nfunction moveDown (board, score, gameOverMessage) {\n  let boardcopy = deepCopy(board)\n  boardcopy = rotateRight(boardcopy)\n  boardcopy = shiftMatrixLeft(boardcopy)\n  boardcopy = merge2Left(boardcopy, score).board\n  score = merge2Left(boardcopy, score).score\n  boardcopy = rotateLeft(boardcopy)\n  // if this changes the board, add a new square\n  // console.log('board,', board)\n  // console.log('boardcopy,', boardcopy)\n  // console.log('isMoved', isMoved(board, boardcopy))\n  if (isMoved(board, boardcopy)) {\n    boardcopy = addNewNumber(boardcopy)\n    // check if the game is over\n    if (getBlankCordinates(boardcopy).length === 0) {\n      gameOverMessage = 'You lost the game'\n    // TO DO: show a fail message and reset the game\n    } else {\n      gameOverMessage = null\n      return { boardcopy, score, gameOverMessage }\n    }\n  } else {\n    return { boardcopy, score, gameOverMessage }\n  }\n}\n\n// ===========================================\n// -REDUCER-\n// ===========================================\n\nconst boardReducer = (state = initialState, action) => {\n  const stateCopy = deepCopy(state)\n  let board = stateCopy.board\n  let score = stateCopy.score\n  let gameOverMessage = stateCopy.gameOverMessage\n  switch (action.type) {\n    case 'ADD_NEW':\n      const resultAddnew = addNewNumber(board)\n      return { ...state, board: resultAddnew }\n\n    case 'TEST_NUMBERS':\n      const result2048 = [[2, 4, 8, 16], [32, 64, 128, 256], [512, 1024, 2048, 0], [2, 4, 8, 16]]\n      return {\n        ...state, board: result2048\n      }\n\n    case 'UP':\n      const resultUp = moveUp(board, score, gameOverMessage)\n      return {\n        ...state, board: resultUp.boardcopy, score: resultUp.score\n      }\n\n    case 'DOWN':\n      const resultDown = moveDown(board, score, gameOverMessage)\n      return { ...state, board: resultDown.boardcopy, score: resultDown.score }\n\n    case 'RIGHT':\n      const resultRight = moveRight(board, score, gameOverMessage)\n      console.log('result right', resultRight)\n\n      return { ...state, board: resultRight.boardcopy, score: resultRight.score }\n\n    case 'LEFT':\n      let resultLeft = moveLeft(board, score, gameOverMessage)\n      console.log('result left,', resultLeft)\n      return { ...state, board: resultLeft.boardcopy, score: resultLeft.score }\n\n    case 'RESTART':\n      return initialState\n\n    // case 'INIT':\n    //   if (action.board) {\n    //     return { ...state, ...action.board }\n    //   }\n    //   let resultI = matrix.addNewNumber().addNewNumber()\n    //   return { ...state, ...resultI\n    //   }\n    default:\n      return state\n  }\n}\n\nexport default boardReducer\n","import { createStore, combineReducers } from 'redux'\nimport boardReducer from './reducers/board'\n\nconst rootReducer = combineReducers({ board: boardReducer })\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nexport default store\n","import React, { Component } from 'react'\n// import PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nclass BoardContainer extends Component {\n  // static propTypes = {\n  //   board:PropTypes.arrayOf(propTypes.array).isRequired\n  // }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      board: props.board\n    }\n  }\n\n  render () {\n    return (\n      <div className='gameBoard'>\n        {this.props.board.map((row, i) => (\n          <div key={i} className='row'>\n            {row.map((col, j) => (\n              <span key={j} className={'cell block-value-' + this.props.board[i][j]}>{this.props.board[i][j]}</span>\n            ))}\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => (\n  { board: state.board.board }\n)\n\nexport default connect(mapStateToProps)(BoardContainer)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass GameOverMessage extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      board: props.board,\n      score: props.score,\n      gameOverMessage: props.gameOverMessage\n    }\n    this.handleRestart = this.handleRestart.bind(this)\n  }\n\n  handleRestart () {\n    console.log('you pressed new game')\n    this.props.setNewGame()\n  }\n\n  render () {\n    if (this.state.gameOverMessage) {\n      return (\n        <div className='gameOverMessage notification is-danger'>\n          <button className='delete' onClick={this.handleRestart} />\n          {this.props.gameOverMessage}\n        </div>\n      )\n    } else { return null }\n  }\n}\n\nconst mapStateToProps = (state) => (\n  { board: state.board.board, score: state.board.score, gameOverMessage: state.board.gameOverMessage }\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNewGame: () => dispatch({ type: 'RESTART' })\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameOverMessage)\n","import React, { Component } from 'react'\nimport BoardContainer from './BoardContainer'\nimport { connect } from 'react-redux'\nimport GameOverMessage from '../components/GameOverMessage'\n\n// import Heading from '../components/Heading'\nexport class GameContainer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      board: props.board,\n      score: props.score,\n      gameOverMessage: props.gameOverMessage\n    }\n    this.handleRestart = this.handleRestart.bind(this)\n  }\n\n  handleRestart () {\n    console.log('you pressed new game')\n    this.props.setNewGame()\n  }\n  render () {\n    return (\n      <div className='gameContainer container'>\n\n        <div className='gameHeader'>\n          <button className='button is-danger' onClick={this.handleRestart}>New Game</button> <span className='button is-primary is-outlined'>Score: {this.props.score}</span>\n        </div>\n        <GameOverMessage />\n\n        <BoardContainer />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => (\n  { board: state.board.board, score: state.board.score, gameOverMessage: state.board.gameOverMessage }\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n  setNewGame: () => dispatch({ type: 'RESTART' })\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameContainer)\n","import React, { Component } from 'react'\nimport GameContainer from '../containers/gameContainer'\nimport { connect } from 'react-redux'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      board: props.board\n    }\n    this.handler = this.handler.bind(this)\n  }\n\n  handler (event) {\n    // console.log(event.key)\n    if (event.key === 'Alt') {\n      console.log('===========================')\n      this.props.testBoard()\n    }\n    if (event.key === 'ArrowUp') {\n      // console.log(this.props.board)\n      console.log('===========================')\n      console.log('you just pressed', event.key)\n      this.props.moveUp()\n    }\n    if (event.key === 'ArrowRight') {\n      console.log('===========================')\n      console.log('you just pressed', event.key)\n      this.props.moveRight()\n    }\n    if (event.key === 'ArrowDown') {\n      console.log('===========================')\n      console.log('you just pressed', event.key)\n      this.props.moveDown()\n    }\n    if (event.key === 'ArrowLeft') {\n      console.log('===========================')\n      console.log('you just pressed', event.key)\n      this.props.moveLeft()\n    }\n    if (event.key === 'Enter') {\n      console.log('===========================')\n      console.log('you just pressed', event.key)\n      this.props.addRandomSquare()\n    }\n  }\n\n  render () {\n    return (\n      <div className='App' tabIndex='0' onKeyDown={this.handler}>\n        <header className='App-header'>\n          <h1>\n           2048 Game\n          </h1>\n        </header>\n        <GameContainer />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => (\n  { board: state.board.board, score: state.board.score }\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n  addRandomSquare: () => dispatch({ type: 'ADD_NEW' }),\n  testBoard: () => dispatch({ type: 'TEST_NUMBERS' }),\n  moveRight: () => dispatch({ type: 'RIGHT' }),\n  moveLeft: () => dispatch({ type: 'LEFT' }),\n  moveUp: () => dispatch({ type: 'UP' }),\n  moveDown: () => dispatch({ type: 'DOWN' })\n\n  // setNewGame: () => dispatch({ type: 'RESTART' })\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport store from './redux/store'\nimport App from './components/App'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n  , document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}